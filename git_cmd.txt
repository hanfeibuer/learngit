------------------------- github command ------------------------------------------------------$ git init  #把当前目录变成Git可以管理的仓库$ git add <file>, <file1> #添加文件/修改文件, 一次可以添加多个文件$ git commit -m "comments" #提交到仓库，-m后添加提交的说明$ git status  #可以时刻掌握仓库的状态$ git diff <file> #展示文件file具体被修改了什么内容$ git log #显示从从近到远的提交日志$ git reset --hard HEAD^ #回退到上一个版本，HEAD^^ 表示往前数第二个版本，HEAD~100表示往前数第100个版本，HEAD^ 也可以被具体的版本序号，如 git reset --hard de389(版本号的前5位，不用写全，足够区别出是哪个版本就可以了)# 了解暂存区的概念（stage）, git add 是把修改的内容存放到暂存区；# git commit 提交的是暂存区的修改，即通过git add存放在暂存区的修改；$ git checkout --readme.txt #把文件readme.txt在工作区的修改全部修改撤销掉，即撤销掉还没有存放到暂存区的修改；$ git reset HEAD <file> #把暂存区的修改撤销掉，重新放回到工作区，这时，可以通过git checkout --<file> 把工作区的修改丢掉，这样一来，所有的修改就都没有了。$ git rm <file> #从版本库中删除文件，删除后通过 git commit -m "xxx" 提交删除----- 远程仓库 -----------------------------------------------------------$ git remote add origin git@github.com:hanfeibuer/learngit.git #关联远程库$ git push -u origin master #第一次推送master分支的所有内容$ git push origin master # origin-指远程库，master-指的是本地分支，该操作会把本地分支master推送到远程库对应的分支$ git push origin dev #将本地dev推送到远程库origin, 如果远程库之前没有dev分支，推送之后会创建dev分支----- git 鼓励大量使用分支 ------------------------------------------------$ git branch #查看分支$ git branch <name> #创建名字为name的分支$ git checkout <name> #切换当前分支到name,即让HEAD指向名字为name的分支$ git checkout -b <name> #创建 + 切换当前分支到name$ git merge <name> #和并name分支到当前分支$ git branch -d <name> #删除name分支（一般在合并之后）--git创建、合并、删除分支非常快，所以鼓励大家开发的时候使用分支，开发完成后再合并然后删除，这样的开发模式更安全--新建分支并指向该分支featruel, 修改文件并提交；然后切换当前分支到master, 在修改文件并提交；然后合并featruel分支到当前master分支，这时候git 提示无法自动合并，因为有冲突，需要手动处理冲突（打开文件重新修改文件），再add,commit,这时，分支合并成功，可以删除featurel.$ git log --graph #可以查看合并分支图。tips: 退出git log 可以输入'q'$ git merge --no-ff -m "comments" <name> #以非fast forward的方式合并分支，这样一来，git在合并的时候会生成一个新的commit$ git stash #可以把当前的工作现场（工作区的内容）保存起来，然后切换到其他分支，处理其他紧急事务$ git stash list #处理完其事物（其他分支），回到之前保存了工作现场的分支，可以查看之前保存的stash列表（可以多次stash）$ git stash apply stash@{0} #恢复工作现场（stash list 为0的那一条），并不删除stash$ git stash pop #恢复工作现场，并删除stash $ git branch -D <name> #强行丢弃一个未合并过的分支$ git remote #查看远程库信息$ git remote -v #查看远程库更详细一些的信息$ git log --graph --pretty=oneline --abbrev-commit #可以查看合并分支图。tips: 退出git log 可以输入'q'$ git pull #抓取远程分支, 如果失败，则需要设置本地分支和远程分支的链接$ git branch --set-upstream-to=origin/dev dev #设置本地分支dev和远程分支dev的链接----- 标签 ------$ git tag <tag name> #默认在最新的一次提交上打标签$ git tag <tag name> 20d326c #在指定的commit上打标签，这里在“20d326c”上打标签$ git tag -a <tag name> -m "comments" <commit NO.> #打标签的同时添加说明$ git tag #列出所有标签$ git show <tag name> #查看标签详细信息